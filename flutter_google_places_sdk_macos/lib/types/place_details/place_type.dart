import 'package:flutter/foundation.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

/// Available types for a [Place]
///
/// Ref: https://developers.google.com/maps/documentation/places/android-sdk/supported_types
@JsonEnum(fieldRename: FieldRename.snake)
enum PlaceType {
  other,
  accounting,
  administrativeAreaLevel1,
  administrativeAreaLevel2,
  administrativeAreaLevel3,
  administrativeAreaLevel4,
  administrativeAreaLevel5,
  airport,
  amusementPark,
  aquarium,
  archipelago,
  artGallery,
  atm,
  bakery,
  bank,
  bar,
  beautySalon,
  bicycleStore,
  bookStore,
  bowlingAlley,
  busStation,
  cafe,
  campground,
  carDealer,
  carRental,
  carRepair,
  carWash,
  casino,
  cemetery,
  church,
  cityHall,
  clothingStore,
  colloquialArea,
  continent,
  convenienceStore,
  country,
  courthouse,
  dentist,
  departmentStore,
  doctor,
  drugstore,
  electrician,
  electronicsStore,
  embassy,
  establishment,
  finance,
  fireStation,
  floor,
  florist,
  food,
  funeralHome,
  furnitureStore,
  gasStation,
  generalContractor,
  geocode,
  groceryOrSupermarket,
  gym,
  hairCare,
  hardwareStore,
  health,
  hinduTemple,
  homeGoodsStore,
  hospital,
  insuranceAgency,
  intersection,
  jewelryStore,
  laundry,
  lawyer,
  library,
  lightRailStation,
  liquorStore,
  localGovernmentOffice,
  locality,
  locksmith,
  lodging,
  mealDelivery,
  mealTakeaway,
  mosque,
  movieRental,
  movieTheater,
  movingCompany,
  museum,
  naturalFeature,
  neighborhood,
  nightClub,
  painter,
  park,
  parking,
  petStore,
  pharmacy,
  physiotherapist,
  placeOfWorship,
  plumber,
  plusCode,
  pointOfInterest,
  police,
  political,
  postBox,
  postOffice,
  postalCodePrefix,
  postalCodeSuffix,
  postalCode,
  postalTown,
  premise,
  primarySchool,
  realEstateAgency,
  restaurant,
  roofingContractor,
  room,
  route,
  rvPark,
  school,
  secondarySchool,
  shoeStore,
  shoppingMall,
  spa,
  stadium,
  storage,
  store,
  streetAddress,
  streetNumber,
  sublocalityLevel1,
  sublocalityLevel2,
  sublocalityLevel3,
  sublocalityLevel4,
  sublocalityLevel5,
  sublocality,
  subpremise,
  subwayStation,
  supermarket,
  synagogue,
  taxiStand,
  touristAttraction,
  townSquare,
  trainStation,
  transitStation,
  travelAgency,
  university,
  veterinaryCare,
  zoo,
}

final placeTypeValuesMap = Map.fromIterable(PlaceType.values,
    key: (item) => describeEnum(item), value: (item) => item);

extension PlaceTypeDescriptor on PlaceType {
  String get value => toString();
}

extension PlaceTypeEnumParser on String {
  PlaceType? toPlaceType() {
    if (toUpperCase() == 'NULL') {
      return null;
    }
    return placeTypeValuesMap[this];
  }
}
